/*
 * Copyright (C) 2017-2019 Alibaba Group Holding Limited
 */


/******************************************************************************
 * @file     sys_console.c
 * @brief    CSI Source File for console
 * @version  V1.0
 * @date     2019-12-19
 ******************************************************************************/
#ifndef __TRCUSER_H__
#define __TRCUSER_H__

#ifdef __cplusplus
extern "C" {
#endif

#define USE_TRACEALYZER_RECORDER 1

#if (USE_TRACEALYZER_RECORDER == 1)

#define TRACE_TYPE_MEM_MALLOC                           0x3b
#define TRACE_TYPE_MEM_MALLOC_FAILED                    0x3c
#define TRACE_TYPE_MEM_FREE                             0x3d
#define TRACE_TYPE_MEM_FREE_FAILED                      0x3e
#define TRACE_TYPE_EVT_DIV                              0x3f

typedef struct
{
    uint8_t type;
    uint8_t obj_handle;
    uint16_t dts;
} trc_event_t;
/**
 * @brief TRACE_STOP_HOOK - Hook Pointer Data Type
 * Declares a data type for a call back function that will be invoked whenever
 * the recorder is stopped.
 */
typedef void (*TRACE_STOP_HOOK)(void);

/**
 * @name trace_stopHookPtr
 * @brief Points to a call back function that is called from trace_stop().
 */
extern TRACE_STOP_HOOK trace_stopHookPtr;

/*******************************************************************************
 * trace_init_data
 *
 * Allocates, if necessary, and initializes the recorder data structure, based
 * on the constants in trcConfig.h.
 ******************************************************************************/
void trace_init_data(void);

/*******************************************************************************
 * trace_set_stop_hook
 *
 * Sets a function to be called when the recorder is stopped.
 ******************************************************************************/
void trace_set_stop_hook(TRACE_STOP_HOOK stopHookFunction);

/*******************************************************************************
 * trace_start
 *
 * Starts the recorder. The recorder will not be started if an error has been
 * indicated using trace_error, e.g. if any of the Nx constants in trcConfig.h
 * has a too small value (NTASK, NQUEUE, etc).
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using tarce_start_internal instead.
 ******************************************************************************/
void trace_start(void);

uint8_t trace_is_running(void);

uint8_t trace_data_is_ready();

/*******************************************************************************
 * trace_stop
 *
 * Stops the recorder. The recording can be resumed by calling trace_start.
 * This does not reset the recorder. Use trace_clear is that is desired.
 ******************************************************************************/
void trace_stop(void);

/*******************************************************************************
 * trace_get_last_error
 *
 * Gives the last error message, if any. NULL if no error message is stored.
 * Any error message is also presented when opening a trace file.
 ******************************************************************************/
char* trace_get_last_error(void);

/*******************************************************************************
 * trace_clear
 *
 * Resets the recorder. Only necessary if a restart is desired - this is not
 * needed in the startup initialization.
 ******************************************************************************/
void trace_clear(void);

/*******************************************************************************
* trace_clear_error
*
* Removes any previous error message generated by recorder calling trace_error.
* By calling this function, it may be possible to start/restart the trace
* despite errors in the recorder, but there is no guarantee that the trace
* recorder will work correctly in that case, depending on the type of error.
******************************************************************************/
void trace_clear_error();

/*******************************************************************************
 * trace_get_trace_buffer
 *
 * Returns a pointer to the recorder data structure. Use this together with
 * trace_get_trace_buffer_size if you wish to implement an own store/upload
 * solution, e.g., in case a debugger connection is not available for uploading
 * the data.
 ******************************************************************************/
void* trace_get_event_buffer(void);

/*******************************************************************************
 * trace_get_trace_buffer_size
 *
 * Gets the size of the recorder data structure. For use together with
 * trace_get_trace_buffer if you wish to implement an own store/upload solution,
 * e.g., in case a debugger connection is not available for uploading the data.
 ******************************************************************************/
uint32_t trace_get_event_buffer_size(void);

/**
 * trace_get_name_buffer
 * @return a pointer to the recorder names of the event data structure.
 */
void* trace_get_name_buffer(void);

/**
 * trace_get_name_buffer_size
 * @return the size of the names data structure.
 */
uint32_t trace_get_name_buffer_size(void);

void *trace_get_buffer_info();

uint16_t trace_get_buffer_info_size();

void trace_recorder_event(uint8_t type, const char* name);

void trace_recorder_malloc(void* addr, uint32_t size);

void trace_recorder_malloc_failed(uint32_t size);

void trace_recorder_mfree(void* addr, uint32_t size);

void trace_recorder_mfree_failed(void* addr);

void trace_printf(const char* formatStr, ...);


#else

/* Empty defines for user functions to avoid compiler errors if trace is not to be used */

#define trace_init_data()
#define trace_start()
#define trace_data_is_ready()
#define trace_is_running()
#define trace_stop()
#define trace_clear()
#define trace_get_event_buffer() ((void*)0)
#define trace_get_event_buffer_size() 0
#define trace_get_mem_buffer() ((void*)0)
#define trace_get_mem_buffer_size() 0
#define trace_get_name_buffer() ((void*)0)
#define trace_get_name_buffer_size() 0
#define trace_get_buffer_info()
#define trace_get_buffer_info_size()
#define trace_printf(formatStr, ...)

#define trace_set_stop_hook(a)

#define TRACE_SET_QUEUE_NAME(a, b)
#define TRACE_SET_MUTEX_NAME(a, b)
#define TRACE_SET_SEMAPHORE_NAME(a, b)
#define TRACE_SET_EVENTGROUP_NAME(a, b)

#endif

#ifdef __cplusplus
}
#endif

#endif
